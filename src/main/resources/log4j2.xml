<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。所以设置为OFF,关闭log4j2自身日志输出-->
<!--monitorInterval=30：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。-->
<configuration status="OFF">
    <!--配置变量全局使用-->
    <properties>
        <property name="PATTERN">
            %d{yyyy-MM-dd HH:mm:ss.SSS} |-%-5level [%thread] %c [%L] -| %msg%n
<!--            %d{ABSOLUTE}-[%p]-[%t]-[%C{1}@line:%L]: %m%n-->
        </property>
        <property name="LOG_HOME">/opt/yanhua-erp-consumer-engine/logs/engine</property>
        <property name="FILE_SIZE">50MB</property>
        <property name="BIZ_FILE_NAME">engine_biz</property>
        <property name="ERROR_FILE_NAME">engine_errors</property>
        <property name="REQUEST_FILE_NAME">engine_request</property>
        <property name="ALL_FILE_NAME">engine_all</property>
    </properties>

    <!--配置appenders输出格式, 输出文件, 输出内容-->
    <appenders>
        <!--控制台日志输出配置-->
        <Console name="Console" target="system_out">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--<ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <!--<File name="logTest" fileName="${LOG_HOME}/${LOG_TEST_FILE}.log" append="true">-->
        <!--<PatternLayout pattern="${PATTERN}"/>-->
        <!--</File>-->

        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="BizFile" fileName="${LOG_HOME}/${BIZ_FILE_NAME}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${BIZ_FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${PATTERN}"/>
            <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!--请求日志-->
        <RollingFile name="RequestFile" fileName="${LOG_HOME}/${REQUEST_FILE_NAME}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${REQUEST_FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${PATTERN}"/>
            <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!--所有日志打印-->
        <RollingFile name="AllFile" fileName="${LOG_HOME}/${ALL_FILE_NAME}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${ALL_FILE_NAME}-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="${PATTERN}"/>
            <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <RollingRandomAccessFile name="ErrorFile"
                                 fileName="${LOG_HOME}/${ERROR_FILE_NAME}.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${ERROR_FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingRandomAccessFile>
    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--additivity=true root日志文件和当前logger都会输出, =false 则root logger就不会输出了-->
        <logger name="LOGGER_BIZ_FILE" level="debug" additivity="true">
            <appender-ref ref="BizFile"/>
        </logger>

        <logger name="LOGGER_REQUEST_FILE" level="debug" additivity="true">
            <appender-ref ref="RequestFile"/>
        </logger>

<!--        这个配置的目标是，没有指定logger的时候，日志输出使用root，而root的级别这里显示设置的是info，希望com.yanhua.engine包下面的日志输出debug级别。

这种情况是log4j2的机制问题，在Log4j2中，logger是有继承关系的，root是根节点，而上面配置中添加的logger就是root的子节点，在log4j2中，有个additivity的属性，它是子Logger 是否继承 父Logger 的 输出源（appender） 的标志位。具体说，默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。由于上面的配置com.yanhua.engine的logger和root都输出到console中了，所以会显示输出了两条日志。

要打破这种传递性，也非常简单，在logger中添加 additivity = "false"，如下所示：-->
        <logger name="com.yanhua.engine" level="debug" additivity="false">
            <appender-ref ref="AllFile"/>
            <appender-ref ref="ErrorFile"/>
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="RollingFile"/>-->
        </logger>

        <!--建立一个默认的root的logger-->
        <root level="info">
            <appender-ref ref="AllFile"/>
            <appender-ref ref="ErrorFile"/>
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="RollingFile"/>-->
        </root>
    </loggers>
</configuration>